Topic : Greedy 

Given an array of integers and in each step we need to remove one elment and its all occurrences from array such that after removing this element all elements which 
are just greater than or smaller than the removed element are also vanished from the array. Need to repeat this process until no element present in array and return 
the maximum sum of all removed elements. 

Eg :- arr = {2,4,7,9,1,2,3}
Ans1 :- sorting these array for better understanding arr = {1,2,2,3,3,4,7,9}
        step1 : Removed element = 1, sum = 1*1 = 1, updated arr = {3,3,4,7,9}, so it will vanish {2,2}.
        step2 : Removed element = 3, sum = 3*2 = 6, updated arr = {7,9}, so it will vanish {4}.
        step3 : Removed element = 7, sum = 7*1 = 7, updated arr = {}, so it will vanish {7,9}
        final ans = 1+6+7 = 14
        
Ans2 :- sorting these array for better understanding arr = {1,2,2,3,3,4,7,9}
        step1 : Removed element = 2, sum = 2*2 = 4, updated arr = {4,7,9}, so it will vanish {1,3,3}.
        step2 : Removed element = 4, sum = 4*1 = 4, updated arr = {9}, so it will vanish {7}.
        step3 : Removed element = 9, sum = 9*1 = 9, updated arr = {}, so it will vanish {}
        final ans = 4+4+9 = 17


#include <bits/stdc++.h> 
using namespace std;
int fn(vector<int>&arr)
{
    int n = arr.size();
    map<int,int>mp;
    for(int i=0; i<n; i++) mp[arr[i]]++;
    vector<int>vec;
    for(auto &a: mp)
    {
        vec.push_back(a.first*a.second);
    }
    int ans_odd=0, ans_even=0;
    int sz = vec.size();
    for(int i=0; i<sz; i+=2) ans_even += vec[i];
    for(int i=1; i<sz; i+=2) ans_odd += vec[i];
    return max(ans_odd, ans_even);
}
int main() {
    vector<int>arr = {2,4,7,3,9,1,2,3};
    cout<<fn(arr)<<endl;
    return 0;
}

